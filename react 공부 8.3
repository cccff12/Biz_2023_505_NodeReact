react 공부 8.3
build 는 배포를 위한 것으로 프로젝트에는 영향없고 삭제가능

함수이름 +컴포넌트= 컴포넌트 이름 부르는 방법
그 안에 있는 건 컴포넌트 본문

src 폴더에 css만들고 index.js나 app.js의  css링크 바꿈

컴포넌트를 만드는 방법: 파일의 첫글자를 대문자로 만들어야 함 그리고 그 파일에 함수 만들기 const ~~ =()=>{} 이렇게

우리는 일반적으로 comps(components )라는 폴더를 만들고 거기에 컴포넌트들을 만듬

main에 싹 다 모아놓고 app.js에 보내는 것이니 main도 똑같은 방식으로 app.js에 import하고 파일 내부에도 추가시켜 놔야 함


input tag의 value 에 {state이름}을 넣는것: 기본적으로 input tag는 change 이벤트가 기본 속성이기 때문에 value에 state를 넣는다면 입력할 수 없게 된다. 이를 해결할려면 const inputChangeHandler 함수를 만들어 onchange에 넣는다 


input 박스 설정:
	const inputChangeHandler = (e) => {
	    const value = e.target.value;
	    setcontent(value);
	  }; 
  이 함수를 만드는데 이건 input 에서 입력한 값을 value에 담아 setcontent에 저장하는 것이다. 그럼 content를 변경할 수 있다.
  여기까지의 결론 = input을 변경시켰다. content라는 state값으로


  ?개글자부터 입력 가능하게 만드는 것
  <button disabled={content.length < ?}>저장하기</button>\
  이렇게 버튼에 disabled를 넣어준다
  disabled는 true false로만 판별한다

 <div> &times;</div> => x클릭을 만들수 있는 코드
 <div> &#x2713;</div>=> 체크 코드를 만들 수 있는 코드

 수업시간에는 app 안에 main이 main안에 input 과 list가 list안에는 item을 넣었음

usestate를 input에서는 = useState("");이렇게 빈칸으로
		   list 에서는 = useState([]); 이렇게 배열로 넣음


샘플로 만들 json배열 만들기  src 안에 data폴더를 만들고 (폴더이름.js) 를 만듬
 		예시
		 const SampleData = [
		   {id:0,
		    sdate: "2020-08-03",
		    stime: "00:00:00",
		    content: "React 학습0",
		    complete: false,
		  },
		   {id:1,
		    sdate: "2021-08-03",
		    stime: "10:00:00",
		    content: "React 학습1",
		    complete: false,
		  },
		 ];
		export { SampleData };- 쓸거니까 export를 해주자

		참고로 import는 todolist에서 했다
		그리고 state의 주입하는 배열 값에 ~~=useState([...SampleData]); 이렇게 넣음

		// map은 리스트의 배열을 변경해 새로운 배열로 만들어주는 함수
	    // 배열의 요소에 어떤 연산을 하고 , 다시 새로운 배열을 생성
  		// .map((item))=>{return 새로운 값}
		  		예시  const todoItemList=todoList.map((todo) => {
		    return <TodoItem>{todo}</TodoItem>;
		  });

		  그리고 샘플 데이터를 넣은 방금 만든 함수를 return에 넣으면 sampledata에 넣은 값이 화면에 나올거다


		  그리고 샘플 데이터를 자식에게 전달해야 하는데 함수를 이렇게 바꿔준다
				    const todoItemList = TodoList.map((todo) => {
		    return <TodoItem item={todo} />;
		  });
		  이건 todoitem이라는 컴포넌트에게 todo라는 변수를 만들고 그 변수에 여기 todo데이터를 실어서 보내겠다는 말이다 
		  즉 컴포넌트 todoitem에 item이라는 변수를 만들고 거기에 list의 값을 담아서 todoitem에 전달한다
		  그럼 item에서는 받아야겠지?
		  그럼 기존에 const TodoItem = () => {} 에서
		  const TodoItem = (props) => {} 이렇게 props라는 키워드를 매개변수로 지정해서 받는다
		  그럼 받았으니 써야지
		  기존 div에 임시로 막 적은 값을 놔뒀는데 거기를 
		  <div>{props.item.sdate}</div> 이렇게 바꾼다
		  굳이 해석하자면 props(item에서 받은 변수).item(list에서 정해준 변수).sdate(샘플데이터에서 정해준 값)

		  넣고자 하는 값을 다 바꿔준 후
		  item에서 classname을 바꿔준다 -완료된 값에 밑줄을 그어주기 위해
		  <div className={props.item.complete ? "content line" : "content"}>
		  이렇게 바꿔주는데 이말은 complete가 true이면 content line을 붙여주고 false면 content를 붙여준다는 말이다


		  이제 input에서 입력한 값을 추가할거다 main으로 가자

		  main에는 input과 todolist가 있는데 이 같은 부모를 둔 이 형제 컴포넌트는 서로 데이터를(state를 ) 교환할 수 없다. 그러니 이 두 컴포넌트를 부모 컴포넌트로 이동시켜야 한다. 가로 이동은 안되고 세로 이동만 된다는 말이다

		  이제 todoinput으로 가서 
		  const [content, setcontent] = useState(""); 이걸 복사하고 기존에 있던건 주석처리한다
		  복사한건 main의 return위에 붙이고 import에 state를 사용하기 위해
		  import { useState } from "react";를 붙여준다

		  그리고 todolist에 
		  import { useState } from "react";
		  import { SampleData } from "../data/Sampletodo"; 이 두 import를 잘라서 메인에 붙여넣는다
		  그리고 todolist의 state선언라인도 잘라서 main에 붙여넣고 기존의 todolist의 state 선언 라인은  주석처리 한다
		  두 state를 부모 컴포넌트로 이동시켰다

		  여기까지 오면 컨텐츠가 없다는 에러가 많이 나올거다

		  자 그럼 이제 input 과 list의 state를 다시 todoinput 과 todolist에 보내야겠지?
		  그럼 main의 return을 이렇게 바꿔준다
					  return (
			    <div className="todo">
			      <TodoInput content={content} setcontent={setcontent} />
			      <TodoList todoList={todoList} />
			    </div>
			  );
			  전에 .map을 이용한 것과 같은 원리이다. content라는 변수를 억지로 만들어 보내고 거기에 main의 state를 집어넣은 것이다.
			  그럼 이제 또 todoinput 과 todolist에서 받아야겠지??


		먼저 todoinput 에서 
		const TodoInput = (props) => { } 이렇게 받고
		const { content, setcontent } = props; 이걸 추가한다
		todolist도 마찬가지로
		const TodoList = (props) => {}이렇게 받고
  		const { todoList } = props; 이걸 추가한다

  		여기서 의외인 점인 input에는 state와 함수 모두 메인에서 전달해줬는데
  		list에는 state만 전달했다는 점이다.

  	여기까지 오면 에러는 끝났을거다 state가 다 옮겨졌으니


  	이제 기본세팅은 끝났고 insert를 실행한다. 
  	todoinput 에 함수를 새로 만들어준다 
  	
  	const btnClickHandler=(e)=>{

  	}
  	이건 버튼을 눌렀을 때 할 일이다.

  *****----근데 여기서 짚고 넘어가야 할 점: 사실 btnClickHandler 이 함수는 todoinput에서 만들어져야 하는 함수가 아니다. content state와 setcontent는 main에서 선언된 것이기 때문에 먼저 할 일이 있다.
  main에서 아래 함수를 추가한다.
   const todoListAdd = (todo) => {
    const addTodo = {
      sdate: "2023-08-03",
      stime: "13:26",
      content: todo,
      complete: false,
    };
    setTodoList([...todoList, addTodo]); -이것도 해석하자면기존 리스트에 addTodo를 추가시키는 거고
  };

이렇게 객체를 만들고 setTodoList를 통해 추가를 시키는 것이다.
(todo)는 내가 input에 입력한 값이다

그리고 이렇게 만든 함수를 todoinput에게 보내줘야 한다. 
main의 return에 이렇게 추가한다 ******(방금 만든 함수 한줄만 추가하면 된다.)
 return (
    <div className="todo">
      <TodoInput
        content={content}
        setcontent={setcontent}
        todoListAdd={todoListAdd}
      />

      보내줬으면 또 받아야지 
      todoinput에서 props에 받고 있는 코드에 방금 받은 함수를 입력하면 된다.
      const { content, setcontent, todoListAdd } = props;


      자 그럼 이제 input에 만든 btnClickHandler 함수에 todoListAdd(content);를 추가한다. 그럼 이렇게 된다 
		        const btnClickHandler = (e) => {
		   			 todoListAdd(content);
				 };

	그럼 버튼 박스에 이벤트를 추가한다.  onClick={btnClickHandler}
	그럼 todoinput의 return은 이렇게 된다
	return (
    <div className="input">
      <input placeholder="TODO" value={content} onChange={inputChangeHandler} />
      <button onClick={btnClickHandler} disabled={content.length < 2}>
        저장하기
      </button>
    </div>
  );
  버튼 tag에 이벤트가 입력된 것이 보이는가? 난 잘 보인다

  이 개념에 대해 요약하자면 state를 변화시키거나 state의 함수를 만들거나 하는건 
   state를 선언한 곳 (여기서는 부모 컴포넌트인 main)에서 밖에 안된다는 것이다.(READ ONLY) 
  자식 컴포넌트에서는 이를 어디 적용시키거나 하는 것만 가능할 뿐이다.
  만약 state를 변경하려면 state를 변경할 함수도 같이 전달받아야 한다.

  그리고 서버를 보면 오류가 하나 있을 것이다. Warning: Each child in a list should have a unique "key" prop. 이런 오류인데 유니크 키 값이 없어서 그런 것이다. 그래서 추가시킬건데 sampledata에 id를  추가시켜 준다. (가능하면 0부터)

  그리고 main으로 와서 const todoListAdd 함수 안에 추가시켜 준다 
  const todoListAdd = (todo) => {
    (여기)
    const addTodo = {} 가로 안에 추가시키면 된다

    const id = todoList[todoList.length - 1].id + 1; 이것인데 요약하면 리스트의 값 -1을 id 로 추가시키겠다는 말이다.

그리고 const addTodo = {
      id: id, <= 여기에도 이걸 추가시킨다


    그리고 todolist로 와서 todoItemList 함수에 return <TodoItem item={todo} 옆에 key={todo.id}를 추가시킨다. 그럼 이렇게 된다.
    		const todoItemList = todoList.map((todo) => {
   			 	return <TodoItem item={todo} key={todo.id} />;
 			 });
 			 이렇게 되면 유니크한 키 값이 생긴다.


 			 이제 날짜와 시간을 받을 도구를 설치할거다 git bash를 들어가서(가장 상위의 파일로 가서 받는게 아니라 프로젝트 파일에 받자)
 			 명령어는  npm install moment  이다
 			 그럼 package.json의 dependencies에 moment가 추가될 것이다 

 			 그럼 main의 import에 다음을 추가한다  
 			 import moment from "moment";

 			 그럼 이제 시간값을 설정할 수 있게 됐다


 			 그럼 todoListAdd 함수를 이렇게 바꿔준다
 			   const todoListAdd = (todo) => {
   				 const id = todoList[todoList.length - 1].id + 1;
  				  const addTodo = {
					      id: id,
					      sdate: moment().format("YYYY[-]MM[-]DD"),
					      stime: moment().format("HH:mm:ss"),
					      content: todo,
					      complete: false, };
			    setTodoList([...todoList, addTodo]);
			  };

			  그리고 main에서 list state 부분을 이렇게 바꿔준다 
			  const [todoList, setTodoList] = useState([]);
			 이걸 useState([]) 이렇게 바꿔준다. 배열 안을 빈값으로만 바꾸면 된다. 
			 그럼 위와 같이 된다

			 여기까지 하면 id가 없다고 에러가 뜰거다 (const id = todoList[todoList.length - 1].id + 1; 여기서 todoList가 없어서 에러가 뜬거다 위에서 빈칸으로 바꿨으니)
			 
			 이제 하나를 더 설치해준다 
			  npm install react-uuid 이거다

			  그리고 에러가 났던 todoListAdd함수의 

			const id = todoList[todoList.length - 1].id + 1 ; 이부분을

			  const id = todoList[todoList.length - 1]?.id + 1 || 0;이렇게 바꿔준다

			  이제 추가한 다음에 input의 입력창을 지워줄거다.

			 todoinput으로 가서

			 btnClickHandler함수에 setcontent("");을 추가한다. 
			 그럼 이 함수는 const btnClickHandler = (e) => {
    						todoListAdd(content);
						    setcontent("");
  								};이렇게 된다

  				그럼 이제 추가 후 값이 지워진다.


  완료 버튼을 눌렀을 떄 완료 처리
  나 밑줄 긋는 거 구현 안됐는데? 망함

  일단 todoitem에 가서  

   const { item } = props;
  const compClickHandler = (e, id) => {
    alert(id);
  };

  를 리턴 위에 추가하고 
  div className="complete" 옆에 onClick={compClickHandler} 이걸 추가

  * 여기서 주의 할 점 compClickHandler(item, id) 절대 이렇게 하지말자 이렇게 하면 코드가 지나갈때마다 작동돼서 난리난다

  그래서 <div className="complete" onClick={(e) => compClickHandler(e, item.id)}>이렇게 한다.

그럼 저 div를 누를때마다 id값이 alert에 뜰거다 
그리고 main에  
const itemComplete = (id) => {
    alert(id);
  }; 함수를 만들고
  그리고 <TodoList todoList={todoList} itemComplete={itemComplete} />이렇게 todolist에게 보낸다

  그리고 list에 보냈으니 
  todolist에서 const { todoList, itemComplete(이부분만 추가) } = props; 이렇게 받아서
    return <TodoItem item={todo} key={todo.id} itemComplete={itemComplete}(이부분만 추가) />;
  });

  이렇게 추가한다

  그리고 main의 itemComplete 함수를
  이렇게 바꾼다
  const itemComplete = (id) => {
    todoList.map((todo) => {
      if (todo.id === id) {
        setcontent({ ...content, id: id });
      }
    });
  };
