react 공부 8.3
build 는 배포를 위한 것으로 프로젝트에는 영향없고 삭제가능

함수이름 +컴포넌트= 컴포넌트 이름 부르는 방법
그 안에 있는 건 컴포넌트 본문

src 폴더에 css만들고 index.js나 app.js의  css링크 바꿈

컴포넌트를 만드는 방법: 파일의 첫글자를 대문자로 만들어야 함 그리고 그 파일에 함수 만들기 const ~~ =()=>{} 이렇게

우리는 일반적으로 comps(components )라는 폴더를 만들고 거기에 컴포넌트들을 만듬

main에 싹 다 모아놓고 app.js에 보내는 것이니 main도 똑같은 방식으로 app.js에 import하고 파일 내부에도 추가시켜 놔야 함


input tag의 value 에 {state이름}을 넣는것: 기본적으로 input tag는 change 이벤트가 기본 속성이기 때문에 value에 state를 넣는다면 입력할 수 없게 된다. 이를 해결할려면 const inputChangeHandler 함수를 만들어 onchange에 넣는다 


input 박스 설정:
	const inputChangeHandler = (e) => {
	    const value = e.target.value;
	    setcontent(value);
	  }; 
  이 함수를 만드는데 이건 input 에서 입력한 값을 value에 담아 setcontent에 저장하는 것이다. 그럼 content를 변경할 수 있다.
  여기까지의 결론 = input을 변경시켰다. content라는 state값으로


  ?개글자부터 입력 가능하게 만드는 것
  <button disabled={content.length < ?}>저장하기</button>\
  이렇게 버튼에 disabled를 넣어준다
  disabled는 true false로만 판별한다

 <div> &times;</div> => x클릭을 만들수 있는 코드
 <div> &#x2713;</div>=> 체크 코드를 만들 수 있는 코드

 수업시간에는 app 안에 main이 main안에 input 과 list가 list안에는 item을 넣었음

usestate를 input에서는 = useState("");이렇게 빈칸으로
		   list 에서는 = useState([]); 이렇게 배열로 넣음


샘플로 만들 json배열 만들기  src 안에 data폴더를 만들고 (폴더이름.js) 를 만듬
 		예시
		 const SampleData = [
		   {id:0,
		    sdate: "2020-08-03",
		    stime: "00:00:00",
		    content: "React 학습0",
		    complete: false,
		  },
		   {id:1,
		    sdate: "2021-08-03",
		    stime: "10:00:00",
		    content: "React 학습1",
		    complete: false,
		  },
		 ];
		export { SampleData };- 쓸거니까 export를 해주자

		참고로 import는 todolist에서 했다
		그리고 state의 주입하는 배열 값에 ~~=useState([...SampleData]); 이렇게 넣음

		// map은 리스트의 배열을 변경해 새로운 배열로 만들어주는 함수
	    // 배열의 요소에 어떤 연산을 하고 , 다시 새로운 배열을 생성
  		// .map((item))=>{return 새로운 값}
		  		예시  const todoItemList=todoList.map((todo) => {
		    return <TodoItem>{todo}</TodoItem>;
		  });

		  그리고 샘플 데이터를 넣은 방금 만든 함수를 return에 넣으면 sampledata에 넣은 값이 화면에 나올거다


		  그리고 샘플 데이터를 자식에게 전달해야 하는데 함수를 이렇게 바꿔준다
				    const todoItemList = TodoList.map((todo) => {
		    return <TodoItem item={todo} />;
		  });
		  이건 todoitem이라는 컴포넌트에게 todo라는 변수를 만들고 그 변수에 여기 todo데이터를 실어서 보내겠다는 말이다 
		  즉 컴포넌트 todoitem에 item이라는 변수를 만들고 거기에 list의 값을 담아서 todoitem에 전달한다
		  그럼 item에서는 받아야겠지?
		  그럼 기존에 const TodoItem = () => {} 에서
		  const TodoItem = (props) => {} 이렇게 props라는 키워드를 매개변수로 지정해서 받는다
		  그럼 받았으니 써야지
		  기존 div에 임시로 막 적은 값을 놔뒀는데 거기를 
		  <div>{props.item.sdate}</div> 이렇게 바꾼다
		  굳이 해석하자면 props(item에서 받은 변수).item(list에서 정해준 변수).sdate(샘플데이터에서 정해준 값)

		  넣고자 하는 값을 다 바꿔준 후
		  item에서 classname을 바꿔준다 -완료된 값에 밑줄을 그어주기 위해
		  <div className={props.item.complete ? "content line" : "content"}>
		  이렇게 바꿔주는데 이말은 complete가 true이면 content line을 붙여주고 false면 content를 붙여준다는 말이다


		  이제 input에서 입력한 값을 추가할거다 main으로 가자

		  main에는 input과 todolist가 있는데 이 같은 부모를 둔 이 형제 컴포넌트는 서로 데이터를(state를 ) 교환할 수 없다. 그러니 이 두 컴포넌트를 부모 컴포넌트로 이동시켜야 한다. 가로 이동은 안되고 세로 이동만 된다는 말이다

		  이제 todoinput으로 가서 
		  const [content, setcontent] = useState(""); 이걸 복사하고 기존에 있던건 주석처리한다
		  복사한건 main의 return위에 붙이고 import에 state를 사용하기 위해
		  import { useState } from "react";를 붙여준다

		  그리고 todolist에 
		  import { useState } from "react";
		  import { SampleData } from "../data/Sampletodo"; 이 두 import를 잘라서 메인에 붙여넣는다
		  그리고 todolist의 state선언라인도 잘라서 main에 붙여넣고 기존의 todolist의 state 선언 라인은  주석처리 한다
		  두 state를 부모 컴포넌트로 이동시켰다

		  여기까지 오면 컨텐츠가 없다는 에러가 많이 나올거다

		  자 그럼 이제 input 과 list의 state를 다시 todoinput 과 todolist에 보내야겠지?
		  그럼 main의 return을 이렇게 바꿔준다
					  return (
			    <div className="todo">
			      <TodoInput content={content} setcontent={setcontent} />
			      <TodoList todoList={todoList} />
			    </div>
			  );
			  전에 .map을 이용한 것과 같은 원리이다. content라는 변수를 억지로 만들어 보내고 거기에 main의 state를 집어넣은 것이다.
			  그럼 이제 또 todoinput 과 todolist에서 받아야겠지??


		먼저 todoinput 에서 
		const TodoInput = (props) => { } 이렇게 받고
		const { content, setcontent } = props; 이걸 추가한다
		todolist도 마찬가지로
		const TodoList = (props) => {}이렇게 받고
  		const { todoList } = props; 이걸 추가한다

  		여기서 의외인 점인 input에는 state와 함수 모두 메인에서 전달해줬는데
  		list에는 state만 전달했다는 점이다.

  	여기까지 오면 에러는 끝났을거다 state가 다 옮겨졌으니


  	이제 기본세팅은 끝났고 insert를 실행한다. 
  	todoinput 에 함수를 새로 만들어준다 
  	
  	const btnClickHandler=(e)=>{

  	}
  	이건 버튼을 눌렀을 때 할 일이다.